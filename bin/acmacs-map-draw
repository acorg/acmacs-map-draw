#! /usr/bin/env python3
# -*- Python -*-

"""
"""

import sys, os, traceback, pprint
if sys.version_info.major != 3: raise RuntimeError("Run script with python3")
from pathlib import Path
sys.path[:0] = [str(Path(os.environ["ACMACSD_ROOT"]).resolve().joinpath("py"))]
import logging; module_logger = logging.getLogger(__name__)

import acmacs_map_draw
from acmacs_base.timeit import timeit

# ----------------------------------------------------------------------

def main(args):
    if not Path(args.chart[0]).exists():
        raise RuntimeError("File not found: " + args.chart[0])
    with timeit("Reading chart from " + args.chart[0]):
        chart = acmacs_map_draw.import_chart(args.chart[0])
    with timeit("Drawing chart to " + args.output[0]):
        acmacs_map_draw.draw_chart(output_file=args.output[0], chart=chart, settings=sSettings, output_width=args.output_width, verbose=args.verbose)

# ----------------------------------------------------------------------

sSettings = {
    "flip?": "'ns', 'ew', [-1, 1] - diagonal",
    "flip": "",
    "rotate?": "-4.99 ... 4.99 - radians, otherwise degrees, positive - counterclockwise",
    "rotate": 0,
    "viewport?": "[X, Y, SIZE]",
    "viewport": [-6, -6, 10],
    "legend": {"show": True, "offset": [-10, -10], "background": "grey99", "border_color": "black", "border_width": 0.1, "label_size": 12, "point_size": 8},
    "background": "white",
    "grid": {"color": "grey80", "width": 1},
    "border": {"color": "black", "width": 1},
    }

# ----------------------------------------------------------------------

try:
    import argparse
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-d', '--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')

    # parser.add_argument('--hidb-dir', action='store', dest='hidb_dir', default="~/AD/data", help='Directory with hidb4.*.json.xz.')
    parser.add_argument('-s', '--output-size', action='store', dest='output_width', default=600, help='Width of the output image.')
    parser.add_argument('-v', '--verbose', action='store_true', dest='verbose', default=False)

    parser.add_argument('chart', nargs=1, help='Chart file.')
    parser.add_argument('output', nargs=1, help='Output pdf file.')

    args = parser.parse_args()
    logging.basicConfig(level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s")
    exit_code = main(args)
except Exception as err:
    logging.error('{}\n{}'.format(err, traceback.format_exc()))
    exit_code = 1
exit(exit_code)

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
