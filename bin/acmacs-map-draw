#! /usr/bin/env python3
# -*- Python -*-

"""
"""

import sys, os, traceback, pprint
if sys.version_info.major != 3: raise RuntimeError("Run script with python3")
from pathlib import Path
sys.path[:0] = [str(Path(os.environ["ACMACSD_ROOT"]).resolve().joinpath("py"))]
import logging; module_logger = logging.getLogger(__name__)

import acmacs_map_draw
from acmacs_base.timeit import timeit

# ----------------------------------------------------------------------

def main(args):
    if not Path(args.chart[0]).exists():
        raise RuntimeError("File not found: " + args.chart[0])
    with timeit("Reading chart from " + args.chart[0]):
        chart = acmacs_map_draw.import_chart(args.chart[0])
    with timeit("Drawing chart to " + args.output[0]):
        try:
            acmacs_map_draw.draw_chart(output_file=args.output[0], chart=chart, settings=sSettings, output_width=args.output_width, verbose=args.verbose)
        except acmacs_map_draw.UnrecognizedMod as err:
            if args.verbose:
                raise
            module_logger.error('Unrecognized mod: {} (-v to get details)'.format(repr(err.args[0])))
            return 1

# ----------------------------------------------------------------------

sSettings = {
    "mods": [
        "egg", "reassortant",
        "all_grey",
        {"N": "title", "text_size": 12, "background": "#F0F0FF", "border_color": "black", "border_width": 0.1},
        {"N": "aa_substitutions", "positions": [159], "legend": {"show": True, "offset": [-10, -10], "point_count": True, "background": "grey99", "border_color": "black", "border_width": 0.1, "label_size": 12, "point_size": 8}},
        {"N": "vaccines", "size": 15, "label": {
            "": {"offset": [0, 1], "color": "black", "size": 12, "name_type": "abbreviated_with_passage_type"},
            "current-reassortant": {"offset": [1, 0]},
            "current-cell": {"offset": [-1, 1]},
            }
        },
        ],
    "mods?": [
        "flip_ns", "flip_ew", {"N": "flip", "value": [-1, 1]},
        {"N": "rotate_degrees", "angle": 30}, {"N": "rotate_radians", "angle": -1},
        {"N": "viewport", "value": [-6, -6, 10]},
        "egg", "reassortant", "all_grey",
        {},
        {"N": "continents", "legend": {"show": False, "offset": [-1, -1], "size": 100}},
        {"N": "clades", "legend": {"show": True, "offset": [-10, -10], "point_count": True, "background": "grey99", "border_color": "black", "border_width": 0.1, "label_size": 12, "point_size": 8}},
        {"N": "aa_substitutions", "positions": [159], "legend": {"show": True, "offset": [-10, -10], "point_count": True, "background": "grey99", "border_color": "black", "border_width": 0.1, "label_size": 12, "point_size": 8}},
        {"N": "vaccines", "size": 15},
        {"N": "vaccines", "size": 15, "label": {
            "": {"offset": [0, 1], "color": "black", "size": 12, "name_type": "abbreviated_with_passage_type"},
            "current-egg": {"offset": [0, 1]},
            "current-cell": {"offset": [-1, 1]},
        }},
        {},
        {"N": "style", "index": 0, "fill": "red", "outline": "green", "show": True, "shape": "triangle", "size": 10, "outline_width": 1, "aspect": 1, "rotation": 0, "raise_": True, "lower": None},
        {"N": "style", "index": [1,2,3], "fill": "red", "outline": "green", "show": True, "shape": "triangle", "size": 10, "outline_width": 1, "aspect": 1, "rotation": 0, "raise_": True, "lower": None},
        {},
        {"N": "title", "text_size": 12, "background": "#F0F0FF", "border_color": "black", "border_width": 0.1},
        {"N": "title", "display_name": ["T", "X"], "text_size": 12, "background": "#F0F0FF", "border_color": "black", "border_width": 0.1},
        {"N": "point_scale", "scale": 1, "outline_scale": 1},
        {"N": "background", "color": "white"},
        {"N": "grid", "color": "grey80", "line_width": 1},
        {"N": "border", "color": "black", "line_width": 1},
        ],
    # "legend": {"show": True, "offset": [-10, -10], "background": "grey99", "border_color": "black", "border_width": 0.1, "label_size": 12, "point_size": 8},
    }

# ----------------------------------------------------------------------

try:
    import argparse
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-d', '--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')

    # parser.add_argument('--hidb-dir', action='store', dest='hidb_dir', default="~/AD/data", help='Directory with hidb4.*.json.xz.')
    parser.add_argument('-s', '--output-size', action='store', dest='output_width', default=600, help='Width of the output image.')
    parser.add_argument('-v', '--verbose', action='store_true', dest='verbose', default=False)

    parser.add_argument('chart', nargs=1, help='Chart file.')
    parser.add_argument('output', nargs=1, help='Output pdf file.')

    args = parser.parse_args()
    logging.basicConfig(level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s")
    exit_code = main(args)
except Exception as err:
    logging.error('{}\n{}'.format(err, traceback.format_exc()))
    exit_code = 1
exit(exit_code)

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
