#! /usr/bin/env python3
# -*- Python -*-

"""
"""

import sys, os, tempfile, datetime, traceback, pprint
if sys.version_info.major != 3: raise RuntimeError("Run script with python3")
from pathlib import Path
sys.path[:0] = [str(Path(os.environ["ACMACSD_ROOT"]).resolve().joinpath("py"))]
import logging; module_logger = logging.getLogger(__name__)

import acmacs_map_draw
from acmacs_base.timeit import timeit
from acmacs_base.json import read_json, write_json
from acmacs_map_draw import open_image, temp_output

# ----------------------------------------------------------------------

def main(args):
    if not Path(args.chart[0]).exists():
        raise RuntimeError("File not found: " + args.chart[0])
    with timeit("Reading chart from " + args.chart[0]):
        chart = acmacs_map_draw.import_chart(args.chart[0])
    settings = sSettings
    if args.settings:
        settings_file = Path(args.settings)
        if settings_file.exists():
            settings = read_json(settings_file)
            update_settings = False
        else:
            update_settings = True
    if mod_settings(settings, args):
        update_settings = True
    if args.verbose:
        module_logger.debug('mods:\n{}'.format(pprint.pformat(settings["mods"])))
    with temp_output(args.output, make_temp_output=args.draw_map) as output:
        with timeit("Drawing chart to " + str(output)):
            try:
                chart_draw = acmacs_map_draw.draw_chart(output_file=output, chart=chart, settings=settings, output_width=args.output_width, draw_map=args.draw_map, verbose=args.verbose)
                if args.save:
                    save(args.save, chart, chart_draw)
            except acmacs_map_draw.UnrecognizedMod as err:
                if args.verbose:
                    raise
                module_logger.error('Unrecognized mod: {} (-v to get details)\n{}'.format(repr(err.args[0]), err.args[1] if len(err.args) > 1 else ""))
                return 1
        if args.settings and update_settings:
            write_json(path=settings_file, data=settings)
        if args.draw_map and args.open_image:
            open_image(output)

# ----------------------------------------------------------------------

sSettings = {
    "mods": [
        # "flip_ew",
        # {"N": "rotate_degrees", "angle": -20},
        "egg", "reassortant",
        "all_grey",
        {"N": "title", "?display_name": ["1", "2"], "text_size": 12, "background": "#F0F0FF", "border_color": "black", "border_width": 0.1},
        # {"N": "serum_coverage", "serum": "A(H3N2)/HONG KONG/4801/2014 NYMC-263A", "antigen": 2095, "report": False,
        #      "within_4fold": {"outline": "pink", "outline_width": 3, "raise_": True},
        #      "outside_4fold": {"fill": "grey50", "outline": "black", "raise_": True},
        #      "mark_serum": {"fill": "red", "outline": "black", "raise_": True, "label": {"name_type": "full", "offset": [0, 1.2], "color": "black", "size": 12, "weight": "bold"}},
        #      },
        # {"N": "serum_circle", "serum": "A(H3N2)/TEXAS/50/2012 CDC 2014-084,2014-085", "?antigen": 1,
        #      "circle": {"fill": "#E08080FF", "outline": "blue", "outline_width": 1, "angle_degrees": [0, 240], "radius_line_dash": "dash2"},
        #      "mark_serum": {"fill": "lightblue", "outline": "black", "raise_": True, "label": {"name_type": "full", "offset": [0, 1.2], "color": "black", "size": 12}},
        #      "mark_antigen": {"fill": "lightblue", "outline": "black", "raise_": True, "label": {"show": False, "name_type": "full", "offset": [0, 1.2], "color": "black", "size": 12}},
        # },
        # {"N": "aa_substitutions", "positions": [158, 159], "legend": {"show": True, "offset": [-10, -10], "point_count": True, "background": "grey99", "border_color": "black", "border_width": 0.1, "label_size": 12, "point_size": 8}},
        # {"N": "clades", "light": None, "legend": {"show": True, "offset": [-10, -10], "point_count": True, "background": "grey99", "border_color": "black", "border_width": 0.1, "label_size": 12, "point_size": 8}},
        # {"N": "continents", "outline": "black", "legend": {"show": False, "offset": [-1, -1], "size": 100}},
        {"N": "vaccines",
             "mods": [
                 {"size": 15, "label": {"offset": [0, 1], "color": "black", "weight": "normal", "slant": "normal", "font_family": "helvetica neu", "size": 12, "name_type": "abbreviated_with_passage_type"}},
                 {"type": "previous", "fill": "blue", "outline": "black"},
                 {"type": "current", "fill": "red", "outline": "black"},
                 {"type": "current", "passage": "reassortant", "fill": "green"},
                 {"type": "surrogate", "fill": "pink", "outline": "black"},
                 ],
             "mods?": [
                 {"name": "TEXAS", "passage": "egg", "show": False},
                 {"name": "/4801/", "passage": "cell", "label": {"offset": [-1, 0]}},
                 {"name": "/4801/", "passage": "egg", "no": 1, "label": {"name_type": "full"}},
                 {"type": "current", "passage": "egg", "size": 20},
                 {"type": "surrogate", "passage": "egg", "label": {"font_family": "times new roman", "slant": "italic", "weight": "bold"}}
                 ],
             },
        ],
    "mods?": [
        "flip_ns", "flip_ew", {"N": "flip", "value": [-1, 1]},
        {"N": "rotate_degrees", "angle": 30}, {"N": "rotate_radians", "angle": -1},
        {"N": "viewport", "value": [-6, -6, 10]},
        "egg", "reassortant", "all_grey",
        {},
        {"N": "antigens", "select": "?", "fill": "blue4", "outline": "red", "raise_": True, "report": True, "report_names_threshold": 10,
             "?label": {"name_type": "abbreviated_with_passage_type", "offset": [0, 1], "color": "black", "size": 12, "?weight": "bold", "?slant": "italic", "?font_family": "serif"},
             "?select_variants": [
                 {"name": "NEBRASKA/4/"},
                 {"index": 0}, {"indices": [0, 1]},
                 "reference", "test", "all", "sequenced", "not_sequenced",
                 {"date_range": ["2010-01-01", ""]}, {"older_than_days": 365}, {"younger_than_days": 365},
                 {"passage_type": "egg"}, {"passage_type": "cell"}, {"passage_type": "reassortant"},
                 {"country": "GERMANY"}, {"continent": "NORTH-AMERICA"}
                 ]},
        {"N": "sera", "select": "all", "outline": "cyan3", "raise_": True, "report": True, "report_names_threshold": 10,
             "?label": {"name_type": "abbreviated_with_passage_type", "offset": [0, 1], "color": "black", "size": 12, "?weight": "bold", "?slant": "italic", "?font_family": "serif"},
             "?select_variants": [
                 {"name": "NEBRASKA/4/"},
                 {"index": 0}, {"indices": [0, 1]},
                 "all"
                 ]},
        {"N": "continents", "exclude_reference": True, "outline": "black", "legend": {"show": False, "offset": [-1, -1], "size": 100}},
        {"N": "clades", "light": None,
         "3C2a": {"show": True}, "3C2a1": {"show": True}, "3C3": {"show": True}, "3C3a": {"show": True}, "3C3b": {"show": True}, "": {"show": True},
        "legend": {"show": True, "offset": [-10, -10], "point_count": True, "background": "grey99", "border_color": "black", "border_width": 0.1, "label_size": 12, "point_size": 8}},
        {"N": "aa_substitutions", "positions": [159], "legend": {"show": True, "offset": [-10, -10], "point_count": True, "background": "grey99", "border_color": "black", "border_width": 0.1, "label_size": 12, "point_size": 8}},
        {"N": "aa_substitution_groups", "groups": [{"pos_aa": ["121K", "144K"], "color": "cornflowerblue"}]},
        {"N": "serum_circle", "serum": "A(H3N2)/TEXAS/50/2012 CDC 2014-084,2014-085", "?antigen": 1,
             "circle": {"fill": "#C08080FF", "outline": "blue", "outline_width": 2, "angle_degrees": [0, 30], "radius_line_dash": "dash2"},
             "mark_serum": {"fill": "lightblue", "outline": "black", "raise_": True, "label": {"name_type": "full", "offset": [0, 1.2], "color": "black", "size": 12, "?weight": "bold", "?slant": "italic", "?font_family": "serif"}},
             "mark_antigen": {"fill": "lightblue", "outline": "black", "raise_": True, "label": {"show": False, "name_type": "full", "offset": [0, 1.2], "color": "black", "size": 12, "?weight": "bold", "?slant": "italic", "?font_family": "serif"}},
        },
        {"N": "serum_coverage", "serum": "A(H3N2)/HONG KONG/4801/2014 NYMC-263A", "?antigen": 2095, "report": False,
             "within_4fold": {"outline": "pink", "outline_width": 3, "raise_": True},
             "outside_4fold": {"fill": "grey50", "outline": "black", "raise_": True},
             "mark_serum": {"fill": "red", "outline": "black", "raise_": True, "label": {"name_type": "full", "offset": [0, 1.2], "color": "black", "size": 12, "weight": "bold"}},
             },
        {"N": "vaccines",
             "mods": [
                 {"size": 15, "label": {"offset": [0, 1], "color": "black", "weight": "normal", "slant": "normal", "font_family": "helvetica neu", "size": 12, "name_type": "abbreviated_with_passage_type"}},
                 {"type": "previous", "fill": "blue", "outline": "black"},
                 {"type": "current", "fill": "red", "outline": "black"},
                 {"type": "current", "passage": "reassortant", "fill": "green"},
                 {"type": "surrogate", "fill": "pink", "outline": "black"},
                 ],
             "mods?": [
                 {"name": "TEXAS", "passage": "egg", "show": False},
                 {"name": "/4801/", "passage": "cell", "label": {"offset": [-1, 0]}},
                 {"name": "/4801/", "passage": "egg", "no": 1, "label": {"name_type": "full"}},
                 {"type": "current", "passage": "egg", "size": 20},
                 {"type": "surrogate", "passage": "egg", "label": {"font_family": "times new roman", "slant": "italic", "weight": "bold"}}
                 ],
             },
        {},
        {"N": "style", "index": 0, "fill": "red", "outline": "green", "show": True, "shape": "triangle", "size": 10, "outline_width": 1, "aspect": 1, "rotation": 0, "raise_": True, "lower": None},
        {"N": "style", "index": [1,2,3], "fill": "red", "outline": "green", "show": True, "shape": "triangle", "size": 10, "outline_width": 1, "aspect": 1, "rotation": 0, "raise_": True, "lower": None},
        {},
        {"N": "title", "text_size": 12, "background": "#F0F0FF", "border_color": "black", "border_width": 0.1},
        {"N": "title", "display_name": ["T", "X"], "text_size": 12, "background": "#F0F0FF", "border_color": "black", "border_width": 0.1},
        {"N": "point_scale", "scale": 1, "outline_scale": 1},
        {"N": "background", "color": "white"},
        {"N": "grid", "color": "grey80", "line_width": 1},
        {"N": "border", "color": "black", "line_width": 1},
        ],
    }

# ----------------------------------------------------------------------

def mod_settings(settings, args):
    update_settings = False
    if args.rotate_degrees is not None:
        update_settings = True
        disable_mods(settings, ["rotate_degrees", "rotate_radians"])
        settings["mods"][0:0] = [{"N": "rotate_degrees", "angle": args.rotate_degrees}]
    if args.flip_ew:
        update_settings = True
        disable_mods(settings, ["flip", "flip_ns", "flip_ew"])
        settings["mods"][0:0] = ["flip_ew"]
    if args.flip_ns:
        update_settings = True
        disable_mods(settings, ["flip", "flip_ns", "flip_ew"])
        settings["mods"][0:0] = ["flip_ns"]
    if args.color_by_clade:
        settings["mods"][-1:-1] = [{"N": "clades", "": {"show": False}, "legend": {"show": True, "offset": [-10, -10], "point_count": True, "background": "grey99", "border_color": "black", "border_width": 0.1, "label_size": 10, "point_size": 6}}]
    return update_settings

# ----------------------------------------------------------------------

def disable_mods(settings, mods):
    for mod_no in range(len(settings["mods"])):
        mod = settings["mods"][mod_no]
        if isinstance(mod, dict) and mod.get("N") in mods:
            mod["?N"] = "?" + mod["N"]
            mod["?disabled"] = str(datetime.datetime.now())[:19]
            del mod["N"]
        elif isinstance(mod, str) and mod in mods:
            settings["mods"][mod_no] = {"?N": "?" + mod, "?disabled": str(datetime.datetime.now())[:19]}

# ----------------------------------------------------------------------

def save(filename, chart, chart_draw):
    if filename[-5:] == ".save" or filename[-8:] == ".save.xz":
        acmacs_map_draw.export_chart_lispmds(filename, chart, chart_draw.point_styles_base(), chart_draw.transformation())
    else:
        raise RuntimeError("Cannot save into {}: unsupported format".format(filename))

# ----------------------------------------------------------------------

try:
    import argparse
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-d', '--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')

    # parser.add_argument('--hidb-dir', action='store', dest='hidb_dir', default="~/AD/data", help='Directory with hidb4.*.json.xz.')
    parser.add_argument('--output-size', action='store', dest='output_width', default=600, help='Width of the output image.')
    parser.add_argument('-v', '--verbose', action='store_true', dest='verbose', default=False)
    parser.add_argument('-s', '--settings', action='store', dest='settings', default=None, help='Settings file. Autocreated, if does not exist.')
    parser.add_argument('--save', action='store', dest='save', default=None, help='Save resulting chart with transformation and plot specification (into lispmds).')
    parser.add_argument('-r', '--rotate', action='store', type=float, dest='rotate_degrees', default=None, help='Add rotation mod (degrees).')
    parser.add_argument('--flip-ew', action='store_true', dest='flip_ew', default=None, help='Add flip_ew mod.')
    parser.add_argument('--flip-ns', action='store_true', dest='flip_ns', default=None, help='Add flip_ew mod.')

    parser.add_argument('--clade', action='store_true', dest='color_by_clade', default=False)

    parser.add_argument('-n', action='store_false', dest='draw_map', default=True, help='Do not actually draw a map.')
    parser.add_argument('-m', action='store_false', dest='open_image', default=True, help='Do not open image.')

    parser.add_argument('chart', nargs=1, help='Chart file.')
    parser.add_argument('output', nargs='?', default=None, help='Output pdf file.')

    args = parser.parse_args()
    if args.verbose:
        args.loglevel = logging.DEBUG
    logging.basicConfig(level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s")
    exit_code = main(args)
except Exception as err:
    logging.error('{}\n{}'.format(err, traceback.format_exc()))
    exit_code = 1
exit(exit_code)

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
